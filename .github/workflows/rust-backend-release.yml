name: Rust Backend Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-release:
    name: Build Release Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: open-webui-backend
            asset_name: open-webui-backend-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: open-webui-backend
            asset_name: open-webui-backend-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: open-webui-backend
            asset_name: open-webui-backend-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: open-webui-backend
            asset_name: open-webui-backend-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: open-webui-backend.exe
            asset_name: open-webui-backend-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build release binary
      working-directory: backend-rust
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux/macOS)
      if: runner.os != 'Windows'
      run: strip backend-rust/target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Compress binary (Linux/macOS)
      if: runner.os != 'Windows'
      run: tar -czf ${{ matrix.asset_name }}.tar.gz -C backend-rust/target/${{ matrix.target }}/release ${{ matrix.artifact_name }}

    - name: Compress binary (Windows)
      if: runner.os == 'Windows'
      run: Compress-Archive -Path backend-rust/target/${{ matrix.target }}/release/${{ matrix.artifact_name }} -DestinationPath ${{ matrix.asset_name }}.zip

    - name: Upload Release Asset (Linux/macOS)
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend-rust
        file: ./backend-rust/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/open-webui-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/open-webui-backend:${{ steps.get_version.outputs.VERSION }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
