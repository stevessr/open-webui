name: Rust Backend CI

on:
  push:
    branches: [ main, dev, copilot/rewrite-backend-in-rust ]
    paths:
      - 'backend-rust/**'
      - '.github/workflows/rust-backend-ci.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'backend-rust/**'
      - '.github/workflows/rust-backend-ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('backend-rust/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('backend-rust/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: backend-rust/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('backend-rust/Cargo.lock') }}

    - name: Run tests
      working-directory: backend-rust
      run: cargo test --verbose

    - name: Run clippy (linter)
      working-directory: backend-rust
      run: cargo clippy -- -D warnings

    - name: Check formatting
      working-directory: backend-rust
      run: cargo fmt -- --check

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('backend-rust/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('backend-rust/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: backend-rust/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('backend-rust/Cargo.lock') }}

    - name: Build debug
      working-directory: backend-rust
      run: cargo build --verbose

    - name: Build release
      working-directory: backend-rust
      run: cargo build --release --verbose

    - name: Upload release artifact (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: open-webui-backend-linux-x86_64
        path: backend-rust/target/release/open-webui-backend
        retention-days: 30

    - name: Upload release artifact (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: open-webui-backend-macos-x86_64
        path: backend-rust/target/release/open-webui-backend
        retention-days: 30

    - name: Upload release artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: open-webui-backend-windows-x86_64.exe
        path: backend-rust/target/release/open-webui-backend.exe
        retention-days: 30

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      working-directory: backend-rust
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage
      working-directory: backend-rust
      run: cargo tarpaulin --out Xml --output-dir coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: backend-rust/coverage/cobertura.xml
        flags: rust-backend
        name: rust-backend-coverage
